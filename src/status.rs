#[allow(dead_code)]
#[derive(Debug, Copy, Clone)]
pub enum Status {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    UseProxy = 305,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl Status {
    pub fn from_code(status_code: u16) -> Option<Status> {
        match status_code {
            100 => Some(Status::Continue),
            101 => Some(Status::SwitchingProtocols),
            102 => Some(Status::Processing),
            103 => Some(Status::EarlyHints),
            200 => Some(Status::OK),
            201 => Some(Status::Created),
            202 => Some(Status::Accepted),
            203 => Some(Status::NonAuthoritativeInformation),
            204 => Some(Status::NoContent),
            205 => Some(Status::ResetContent),
            206 => Some(Status::PartialContent),
            207 => Some(Status::MultiStatus),
            208 => Some(Status::AlreadyReported),
            226 => Some(Status::IMUsed),
            300 => Some(Status::MultipleChoices),
            301 => Some(Status::MovedPermanently),
            302 => Some(Status::Found),
            303 => Some(Status::SeeOther),
            304 => Some(Status::NotModified),
            305 => Some(Status::UseProxy),
            307 => Some(Status::TemporaryRedirect),
            308 => Some(Status::PermanentRedirect),
            400 => Some(Status::BadRequest),
            401 => Some(Status::Unauthorized),
            402 => Some(Status::PaymentRequired),
            403 => Some(Status::Forbidden),
            404 => Some(Status::NotFound),
            405 => Some(Status::MethodNotAllowed),
            406 => Some(Status::NotAcceptable),
            407 => Some(Status::ProxyAuthenticationRequired),
            408 => Some(Status::RequestTimeout),
            409 => Some(Status::Conflict),
            410 => Some(Status::Gone),
            411 => Some(Status::LengthRequired),
            412 => Some(Status::PreconditionFailed),
            413 => Some(Status::PayloadTooLarge),
            414 => Some(Status::URITooLong),
            415 => Some(Status::UnsupportedMediaType),
            416 => Some(Status::RangeNotSatisfiable),
            417 => Some(Status::ExpectationFailed),
            418 => Some(Status::ImATeapot),
            421 => Some(Status::MisdirectedRequest),
            422 => Some(Status::UnprocessableEntity),
            423 => Some(Status::Locked),
            424 => Some(Status::FailedDependency),
            425 => Some(Status::TooEarly),
            426 => Some(Status::UpgradeRequired),
            428 => Some(Status::PreconditionRequired),
            429 => Some(Status::TooManyRequests),
            431 => Some(Status::RequestHeaderFieldsTooLarge),
            451 => Some(Status::UnavailableForLegalReasons),
            500 => Some(Status::InternalServerError),
            501 => Some(Status::NotImplemented),
            502 => Some(Status::BadGateway),
            503 => Some(Status::ServiceUnavailable),
            504 => Some(Status::GatewayTimeout),
            505 => Some(Status::HTTPVersionNotSupported),
            506 => Some(Status::VariantAlsoNegotiates),
            507 => Some(Status::InsufficientStorage),
            508 => Some(Status::LoopDetected),
            510 => Some(Status::NotExtended),
            511 => Some(Status::NetworkAuthenticationRequired),
            _ => None,
        }
    }

    pub fn as_tuple(&self) -> (u16, &'static str) {
        match *self {
            Status::Continue => (100, "Continue"),
            Status::SwitchingProtocols => (101, "Switching Protocols"),
            Status::Processing => (102, "Processing"),
            Status::EarlyHints => (103, "Early Hints"),
            Status::OK => (200, "OK"),
            Status::Created => (201, "Created"),
            Status::Accepted => (202, "Accepted"),
            Status::NonAuthoritativeInformation => (203, "Non-Authoritative Information"),
            Status::NoContent => (204, "No Content"),
            Status::ResetContent => (205, "Reset Content"),
            Status::PartialContent => (206, "Partial Content"),
            Status::MultiStatus => (207, "Multi-Status"),
            Status::AlreadyReported => (208, "Already Reported"),
            Status::IMUsed => (226, "IM Used"),
            Status::MultipleChoices => (300, "Multiple Choices"),
            Status::MovedPermanently => (301, "Moved Permanently"),
            Status::Found => (302, "Found"),
            Status::SeeOther => (303, "See Other"),
            Status::NotModified => (304, "Not Modified"),
            Status::UseProxy => (305, "Use Proxy"),
            Status::TemporaryRedirect => (307, "Temporary Redirect"),
            Status::PermanentRedirect => (308, "Permanent Redirect"),
            Status::BadRequest => (400, "Bad Request"),
            Status::Unauthorized => (401, "Unauthorized"),
            Status::PaymentRequired => (402, "Payment Required"),
            Status::Forbidden => (403, "Forbidden"),
            Status::NotFound => (404, "Not Found"),
            Status::MethodNotAllowed => (405, "Method Not Allowed"),
            Status::NotAcceptable => (406, "Not Acceptable"),
            Status::ProxyAuthenticationRequired => (407, "Proxy Authentication Required"),
            Status::RequestTimeout => (408, "Request Timeout"),
            Status::Conflict => (409, "Conflict"),
            Status::Gone => (410, "Gone"),
            Status::LengthRequired => (411, "Length Required"),
            Status::PreconditionFailed => (412, "Precondition Failed"),
            Status::PayloadTooLarge => (413, "Payload Too Large"),
            Status::URITooLong => (414, "URI Too Long"),
            Status::UnsupportedMediaType => (415, "Unsupported Media Type"),
            Status::RangeNotSatisfiable => (416, "Range Not Satisfiable"),
            Status::ExpectationFailed => (417, "Expectation Failed"),
            Status::ImATeapot => (418, "I'm a teapot"),
            Status::MisdirectedRequest => (421, "Misdirected Request"),
            Status::UnprocessableEntity => (422, "Unprocessable Entity"),
            Status::Locked => (423, "Locked"),
            Status::FailedDependency => (424, "Failed Dependency"),
            Status::TooEarly => (425, "Too Early"),
            Status::UpgradeRequired => (426, "Upgrade Required"),
            Status::PreconditionRequired => (428, "Precondition Required"),
            Status::TooManyRequests => (429, "Too Many Requests"),
            Status::RequestHeaderFieldsTooLarge => (431, "Request Header Fields Too Large"),
            Status::UnavailableForLegalReasons => (451, "Unavailable For Legal Reasons"),
            Status::InternalServerError => (500, "Internal Server Error"),
            Status::NotImplemented => (501, "Not Implemented"),
            Status::BadGateway => (502, "Bad Gateway"),
            Status::ServiceUnavailable => (503, "Service Unavailable"),
            Status::GatewayTimeout => (504, "Gateway Timeout"),
            Status::HTTPVersionNotSupported => (505, "HTTP Version Not Supported"),
            Status::VariantAlsoNegotiates => (506, "Variant Also Negotiates"),
            Status::InsufficientStorage => (507, "Insufficient Storage"),
            Status::LoopDetected => (508, "Loop Detected"),
            Status::NotExtended => (510, "Not Extended"),
            Status::NetworkAuthenticationRequired => (511, "Network Authentication Required"),
        }
    }
}
